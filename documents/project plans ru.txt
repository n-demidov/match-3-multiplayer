Задача: формирование и реализация ТЗ к игре, учитывая:
- интерес пользователей (бизнес-требования);
- простоту и быстроту разработки;
- возможность расширения архитектуры (добавление нового функционала, оптимизаций по скорости) в будущем.


Мысли к плану:
- записывать все встречаемые вопросы, баги и пр. Чтобы не забыть и делать дальше;
- набросать на листочке: привести в один вид и начать проектировать всю систему;


Проделанная работа по своему проекту:
+ прототип
  + предварительные требования:
    + знакомство с Heroku;
    + знакомство с ReactJS, ECMAScript 6;
    + знакомство с аутентификацией facebook'а;
    + подбор WebSocket-сервера;
    + первые эксперименты по интеграции всего этого, на примере прототипа чата
  + Part I База: Аутентификация, управление соединениями, обмен операциями, аккаунтинг, чат.
    + аутентификация (на игровом сервере);
    + управление коннекшенами, стратегия реконнектов;
    + обмен операциями;
    + чат;
    + интеграционные тесты: дисконнекты, публичный чат и пр.
  + Part II Игра: игровое лобби, игра, игровой функционал.
    + система спроектирована так, чтобы быстро обрабатывать игровые ходы; а длит-е операции выполн. асинхронно;
    + продумана поддержка анимации;
    + отрисовка игры через HTML 5 Canvas;
    + спроектировано api игры и интеграция игры с сервером;
    + спроектирована игра, проверка правил;
    + базовый функционал Game-реквестов
  + Part III Заключительная:
    + рейтинг-таблица;
    + продумать окончательный дизайн game-реквестов;
    + механизм ботов с определённой степенью "смартовости";
    + добавление БД: хостинг, сохранение, кэширование;
    + замена коллекций на thread-safe;
    + дизайн и функционал UI;
    + графика: картинки фруктов, фона; отображение заставки; поддержка "мелких" разрешений;
    + разбор и фиксинг багов;
    + Privacy Policy и др. документы;
    + периодический пинг бесплатного хостинга с сервисов для мониторинга;
- "постпубликация"
  - оптимиз-я maven-dependency; JVM opts; Spring Boot;
  - написать стабу для приличной нагрузки. Чтобы проверять heap и параметры;
  - добавление баннерной рекламы;
  - профайлинг приложения и анализ через хостинг;
  - ознакомиться какие есть возм-ти хостинга для защиты от DDoS-атак;

.

=== Принятые бизнес-решения
Принятые решения по "Part I База" (бизнес-кейзы и архитектурные):
- предусмотреть подключение доп. соц. сетей, но сделать только для fb. С игрой только из самого fb;
- не тратить время на аутентификацию через системы, кот. не распространяют игру;
- показывать ли на сайте кнопки log in/out? // Нет: сайт не раскручен и не привлекает польз-й => он не нужен.
- каким будет экран неустановленной игры в fb? // Стандартным: это быстро.
- если с того же соединения аутентиф. др. польз-ль. // Делаем дисконнект: такой ситуации не должно быть - юзер заходит только через fb.
- может ли игрок играть одновременно более 1 игры? // Нет: в этом практически нет игрового интереса. + Делать быстрее

Принятые решения по "Part II Игра" (бизнес-кейзы и архитектурные):
- обдумать вариант М.: подойдёт ли вар-т с множеством отдельных, не связанных между собой, игровых серверов? // Вар-т норм вроде. Пока делать 1 сервер.
- спроектировать весь игровой сервер так, чтобы обработка игрового хода была максимально быстрой. Длительные операции, например, вынести в асинхронные обработчики.
- трудно спроектировать сразу учёт абсолютно всех возможных в природе кейзов: и игру и под высокую нагрузку и под защиту от хакеров и под многопоточность и анимацию и перепроектировать потоки... // Отбросить защиту от хакеров (т.к. не актуально). Мало думать о высокой нагрузке, т.к. есть вар-т М.

- делать ли обработку игрового цикла многопоточно? // Делать в 1 потоке: не требуется (и так будет оч. быстро) + так быстрее девелопить
- "схлопывать" ли игровые действия, операции? // Нет и нет: не все действия нужно "схлопывать" - у них разная обработка.
- надо ли очищать другие игровые действия после Move? // Нет: есть типы ходов вне очереди.
- что с анимацией? // 1) обдумано какая нужна. Как её получать. Осталось реализовать в Part 3.
- при пропуске хода надо ли менять тип фруктов? // Пожалуй, нет: часть игровой стратегии.

Принятые решения по "Part III Завершающая"
- Бот:
  - Актуальность наличия бота:
    - если игра не будет популярной - то нужно дать возм-ть в-принципе оценить её. Без бота поиграть не получится;
    - если игра будет популярной, то бот поможет развить популярность и поддерживать ее в не пик часы.
  - Актуальность "смартовости" бота:
    - мало актуально: это не является средством привлечения польз-й. Максимум - удержит подольше.
  - Вопросы:
    - "маскировать" ботов под людей или явно показывать? // Вероятней, "маскировать": людям более привлек-но играть против реальных игроков.
    - можно ли явно показывать ботов и использовать это как маркетинговый ход? // В этом случае: а) не надо менять рейтинг; б) не надо начинать игру принудительно. А надо по кнопке. ПОдводя итог: начать игру по кнопке "Играть с ботом" - наверное, менее популярный кейз.
    - расчитывать ли ботов в рейтинге? // Нет: даём ботам низкий рейтинг, не выше М. В рейтинг-таблице не показываем юзеров с рейтингом ниже М.
    - как создавать ботов: "каждый раз заного" или иметь их "пул" в базе? // Создавать каждый раз рандомного. ID у них будет одинаковый.
    - если польз-ль захочет посм данные о боте (по его ID) или откр страницу с ним? // Кейз видится неактуальным: можно несложно обойти. Напр, заменить на сохр-е в БД...
    - можно ли боту назначить рандомный ID? // Не актуально. Рандомное нельзя из-за коллизий.
- БД:
  - Анализ в каких местах юзер извлекается из БД:
    - create:   // не закэшировать
      - AuthExecutor.getOrCreateUser()
    - update:   // не закэшировать
      - GameChangeNotificationExecutor.updateUserIfFinished()
    - findByThirdPartyInfo:
      - AuthExecutor.getOrCreateUser()
    - get:
      - GameChangeNotificationExecutor.updateUserIfFinished()
      - UserGames.startGameWithBot()
      - UserGames.startGame()
      - SendChatOperationHandler.sendToAll()
    Анализ:
      - findByThirdPartyInfo() - запрашивается при обнов стр. Приоритет кэширования: не высокий.
      - get() - а) написание в чат (не особо прям акутально);
              - б) старт и финиш игры (не так часто случается).
  - Актуальность использования кэша:
    Выводы: кэширование не так прям сильно актуально. Его можно спокойно не делать и перенести в FR'ы. Оно, возможно, даст некоторую проиводительность при высоких нагрузках. Против DDoS - хз, т.к. возм-но от DDoS помогут возможности хостинга.
  Вопросы:
    - какую БД брать? // C Heroku: беспл хостинги могут отключаться, что приведет к невозможности создать/получить пользователя => начать игру.
- дизайн:
  - квадратное поле представляется интереснее;
  - инфу об игре размещать где угодно - лишь бы поместилось. Например, сбоку.


=== Реализация игровых-реквестов:
- Отправка операции и мгновенное прогнозирование (на клиенте) без подтверждения от сервера.

Минусы:
- если вдруг произойдёт рассинхрон-я с сервером. Например, если вдруг сообщение не дойдёт, то пользователь будет думать, что ожидает игру. На сколько реален этот кейз? // Кейз мало реален.
- если зарегались, а потом обновили страницу, то заявка останется висеть. На сколько акутально? // Мало актуально: реквест отменится при дисконнекте коннекшена (вебсокет отключается при перезагрузке страницы). А если игра успеет начаться - ок - так и должно быть.
Плюсы:
- мгновенное реагирование от клиента;
- нет доп. усложнения архитектуры и реализации


=== Thread-safe коллекции:
== Server module:
ConnectionService:
- Map<String, Connection> notAuthedConnections = new ConcurrentHashMap<>();
- Map<String, Connection> authedConnections = new ConcurrentHashMap<>();
- Map<Long, Connection> onlineUsers = new ConcurrentHashMap<>();
GameRequests:
- Map<Long, Integer> gameRequests = new ConcurrentHashMap<>();
UserGames:
- Map<Long, Game> userGames = new ConcurrentHashMap<>();
ChatHub:
String[] messages = new String[AppConfigs.CHAT_HUB_LIMIT];  // synchronized
== Game module:
FruitBountyGameFacade:
- List<Game> games = new CopyOnWriteArrayList<>(); // итер ~33 раза в секунду. А новая игра начинается раз в n секунд. Значит разница в > ~300 раз (минус расходы на окончание игры).
DefaultGameEventsSubscriptions:
- List<GameEventsSubscriber> gameEventsSubscribers = new CopyOnWriteArrayList<>();
== Game-API module:
Game:
- Queue<GameAction> gameActions = new ConcurrentLinkedQueue<>();

Мелочь (идеи):
- (?) обдумать: если один игрок не может сходить, то все фрукты присваиваются другому;

Предложения как будущие FR'ы:
- что если сделать оптимизацию по скорости:
  - убрать иксепшены при валидации операции от клиента;
  - принимать тип операции по int, а не строке?
  - добавить кол-во бакетов для мап: "тонкая настройка". Как вар-т, задать как верхний диапазон среднего кол-ва юзеров;
- горизонтальное масштабирование вебсокет-сервера;
- по безопасности коннекшенов:
  - добавить максимальный лимит на размер принимаемого сообщения;
  - точно ли щас разрыв соед-я происходит только на сервере (бех участия клиенты и хакер не может его перехватить и отменить)? - ресерч;
  - продумать стратегию по бану IP-адресов;
  - надежно ли проверяется токен fb на сервере?
  - может ли стомп клиент послать сообщение в другую очередь?
- улучшение реконнекта:
  - показывать причину дисконнекта: при дисконнекте отправлять спец. тип (type=discon; isResume=t/f; msg="Причина"). Msg пробр-ть на экран разрыва;
  - добавить автоматический реконнект по тайм-ауту (если isResume=true)
- чат
  - направленные сообщения;
  - приватные сообщения;
  - отправка сообщений группе;
  - выделение цветом;
  - кидать тортом и т.д.;
  - при публикации в чат (на сервере) - если такое сообщ уже есть - выходим;
- запретить повторяющиеся имена. Также возм-ть смены имен;
- совместить несколько соц. сетей и мобильную платформу;
- можно ли вставлять рекламу Google в fb. Ознакомиться какие вообще есть способы монетизации fb-приложения;
- тесты: что делать с БД в тестах?
  - может писать в тестовую in-memory базу (например, в H2/Postgre)?
  - м.б. в тесте пулять многопоточно запросы?
  - ресерч @DataJpaTest;
  - ресерч @AutoConfigureTestDatabase;
  - проверка JSON'а с помощью новых методов в тестах:
  "New JacksonTester, GsonTester and BasicJsonTester classes can be used in combination with AssertJ to test JSON marshalling and unmarshalling. Testers can be used with the @JsonTest annotation or directly on a test class":
  https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-1.4-Release-Notes
- как делать матчинг игроков - учитывать ли время ожидания и рейтинг?
- игра:
  - игра в 3-ем, 4-ом;
  - матч-реванш: "когда проиграл - охота отыграться, прям сразу, с тем же противником";
  - турниры;
  - ограничить время на игру (типо как падения выносливости);
  - а что если ввести элемент неполной информации - скрывать середину доски "туманом"..?
- просмотр сыгранных игр (кот. сейчас играют и по истории);
- сепцэффекты:
  - шанс захватить еще 1 клетку при захвате (для определ типа фрукта);
  - можно ещё на более сложном уровне придумать "подлянки" какие-то. Типо под фруктами прячутся (ты и противник видите под какими) бомбочки (отнимаешь у противника несколько ячеек) или наоборот +2/+4 доп ячейки рандомных можно захватить с никем не тронутых ячеек или смена фруктов на те, что у противника (что-то вроде как в уно)
  - задана цель какой фрукт должен быть захвачен последним (для получения к-л бонусов);
- увеличение интереса в игре:
  - бонусы за ежедневный логин; польз. могут дарить друг другу подарки, предметы для красоты; цвет шрифта;
  - улучшенный рейтинг: общий рейтинг + рейтинг за неделю (имеет ли смысл?)
- по модулю игры:
  - не будет ли такого, что для GameLoop не хватит свободного потока из @Scheduled и будет задержка? Вынести в явно выделенный отдельный поток?
  - поделить ли класс "Game" на API и унаследованный в модуле Game?
  - у очереди для GameActions нет ограничения по размеру. Возможно стоило бы проставить;
  - рассмотреть преимущества от замены коллекции FruitBountyGameFacade.games на рассчитанную под быстрый: 1) перебор; 2) более редкое доб/удал. Хотя не факт, что будет выгода... + наверн не особо актуально, т.к.: доб/удал игры будут не часто. И игр будет немного.
  - не отправлять картинку и прочие данные при обновлениях состояния игры - экономия траффика;
- возможные FR'ы по боту:
  - рандомное ожидание хода ботом;
  - рандомное ожидание кол-ва итераций перед началом игры с ботом;
  - если давно не было заявок - то пусть игра с ботом ждет мало времени. Если заявок много - то ждать дольше;
  - можно доб доп проверку в реквестах: если последние n итераций в заявках был 1 чел (желательно этот же);
  - улучшение "смартовости" хода бота
- БД:
  - Кэшировать ли операцию findByThirdPartyInfo()? Напр, использовать ли Spring-аннотацию для кеширования?  https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#cache
  https://stackoverflow.com/questions/26242492/how-to-cache-results-of-a-spring-data-jpa-query-method-without-using-query-cache
  - очистка старых пользователей из базы
    - удалять можно по возрастающей (рейтинг на каждую сотку, до тех пор, пока объектов не станет меньше n)
  - возможные оптимизации хибернейта
- разрешение и экраны: можно сделать для моб. экранов и планшетов. Вероятно, со скейлингом клеток;
- UI и клиент:
  - отображать соц. сеть, с кот. играет игрок;
  - сделать красивое окно для подтверждения сдачи;
  - сдизайнить margin'ы в боковых панелях (возможно разделить кнопки "Сдаться" и "Закрыть";
  - проматывать окно, если закрылось FB-парвой панелью. Можно поресерчить как в др. играх;
  - улучшить подсказки при обучении;
  - когда игрок не установил игру - надо показ. симпатичное превью;
  - сделать чтобы было более понятно, когда игрок получает свой черед хода. Напр, анимация с таймером;
  - обновлять бы аватарку польз-ля, если он ее меняет;
  - сделать бы подписку на события логаута из FB;
  - не обновлять данные на панели User Info без необходимости;
  - при изменении времени - перерисовывать только таймер (без переотрисовывания всего игрового поля);
  - прям в канвасе можно выводить результат игры?
  - сделать ли поменьше клеток - 14 х 14 с увеличением размера чата?
  - можно добавить кнопку автопереводчика в чате на родной язык пользователя (для международного чата);
- можно подумать над красивой графикой и анимацией. Напр, "взрыв" при захвате фруктов;


Баги:
- при обновлении страницы показывается "серое окно" дисконнекта (в Firefox);
  - варианты: можно добавть Sleep (для FF) перед показом серого окна
- если после аутент. и перед полученим истории чата -- кто-то напишет, то сообщение выведется дважды?;
- почему дважды вызывается коллбек на логин по fb-кнопке?
- сделать бы страницу доступной только для FB;
- после долгого отсуствия и затем реконнекта (через кнопку "Reconnect") сервер дисконнектит нас. Возможно, потому что клиент отправляет старый "протухший" токен?
- на клиенте надо отавязаться от кода "if (e.target.innerText === localize('close')) {" - это может спровоцировать редкую багу при переключении локали браузера и не обновлении страницы игры;
- не очень красиво с ссылками "Privacy Policy" и "Terms of Service": сделать разделитель отдельно от текста. И при локали "ru" - текст сначала показывается на англ. языке;
- в facebook'е при "share link" - картинка не подгружается;
- функционал "share link" для фейсбука должен быть доступен только для facebook. Однако сейчас он доступен для любого браузера со вкл. "en" локалью.;


Завязка, что в игре только 2 игрока:
- нет отписки удаления игрока из списка игр при сдаче одного игрока;



=== Кейзы
Кейзы дисконнектов:
- у клиента перезапустился интернет;
- сервак ребутнулся;
- клиент залогинился с нового устройства;
- вебсокет не аутентифицировался в течение 20 секунд;
- с клиента пришёл неизвестный тип операции;
- не аутентифицированный канал отправил операцию

Use-кейзы:
- user A отправляет сообщение пользователю B;
- игрок A сделал игровой ход. Надо обновить инфу всем игрокам;
- разослать всем список топ-игроков: рейтинг-таблицу;
- игрок A просматривает профиль игркоа B, кот. давно не играл


Кейзы для обработки ходов:
1) игра истекла в 1000 ms;
- текущий игрок A сделал ход в 1001 ms;
- игрок B сделал ход в 999 ms

Как должно быть?
- пусть ход А отсечется, т.к. он просрочен;
- пусть ход В отсечется, т.к. на тот момент был не его ход

2) игра истекла в 1000 ms;
- текущий игрок A сделал ход в 1001 ms;
- игрок B сдался в 1002 ms

Как должно быть?
- скипаем ход А;
- ход должен перейти к игроку В;
- ход В должен обработаться

3) игра истекла в 1000 ms;
- текущий игрок A сделал ход в 1001 ms;
- игрок B сделал ход в 1002 ms

Как должно быть?
Вариант #1:
- скипаем ход А;
- скипаем ход В: т.к. пусть игра переключится на него
Расчёт на то, что игровых действий в очереди будет мало.

Вариант #2:
- скипаем ход А;
- ход переходит игроку В;
- обрабатываем ход В.
Расчёт на более нагруженные системы?


=== Ресерчи
= Открытие игры с нового устройства (в fb):
  + трагедия белок - разрывает старое соединение. Показывается другая страница и кнопка: "перезагрузить страницу", кот. перезагр. асинхронно;
  + бильярд (8 pool) - в fb разрывает соед-е;
  + hititrich - "You have loaded the game from another computer or device. Please either close the game, or press the button to continue playing here.";
  + playwormix - не открывает новый коннекшн
  + forgeofempires - "Сессия прервана. Другая копия Forge of Empires была запущена на этом компьютере. Сессия прервана."
  + ferma - "It looks like you've opened up FarmVille 2 in another window! Please continue to play FarmVille 2 there."
  + некоторые шахматы в fb
// Выводы: В fb есть игры, которые разрывают коннекшн для старых соединений.


= Делают ли другие игры реконнект (в fb)?
- Трагедия белок - реконнект при отсоединении не делается (кнопка "Обновить страницу"); "Sorry, the connection is losszzzzzzzzst..." and btn "Refresh the page";
- warmix - "Error. Lost conn to the srv. Please, stay put, do not refresh tha page. Attempted reconnection (3)..."
- poker - "You were unexpec discon from the server", btn "Reconnect" (авт не делает реконнект)
- dead trigger - "Не удалось загрузить игровые данные. Проверьте подключение и перезапустите игру." (авт не делает реконнект)
- agar.io - "Disconnected. Connection has been lost. Press retry to reconnect."
- chess - "Conn wa lost attempting to reconnect..." / "The server closed the connection."
- бильярд - 
- chess 2 - also reconnected
// Выводы: можно как делать реконнект, так и не делать. Надо смотреть что больше подходит.






=== Docs
Spring WebSocket Support docs:
https://docs.spring.io/spring-framework/docs/5.0.0.RC1/spring-framework-reference/web.html#websocket

"Spring Boot + WebSocket example without STOMP and SockJs"
http://www.devglan.com/spring-boot/spring-websocket-integration-example-without-stomp

"Spring Boot + Websocket example"
http://www.devglan.com/spring-boot/spring-boot-websocket-integration-example

Events in Spring STOMP. Eg, "SessionConnectedEvent"
https://docs.spring.io/spring-framework/docs/4.1.0.RC1/spring-framework-reference/html/websocket.html#websocket-stomp-appplication-context-events


Spring Session - WebSocket
https://docs.spring.io/spring-session/docs/current/reference/html5/#websocket
https://docs.spring.io/spring-session/docs/current/reference/html5/guides/websocket.html


"Chat App Using WebFlux, WebSockets & React" - блок "Why Reactive Streams?" - интересен
http://blog.monkey.codes/how-to-build-a-chat-app-using-webflux-websockets-react/


== Горизонтальное масштабирование вебсокет-сервера
"Spring Websocket in a tomcat cluster" https://stackoverflow.com/questions/26853745/spring-websocket-in-a-tomcat-cluster


== Testing Websockets
Testing Websockets with Spring
http://rafaelhz.github.io/testing-websockets/

Spring Websocket Endpoints Testing
https://medium.com/@MelvinBlokhuijzen/spring-websocket-endpoints-integration-testing-180357b4f24c


== Spock:
- Introduction to Testing with Spock: http://www.baeldung.com/groovy-spock
- Running Spock tests with Maven build: https://www.testwithspring.com/lesson/running-unit-tests-with-maven-spock-edition
- Spock mocking for Spring Integration Testing: https://objectpartners.com/2018/06/14/spock-1-2-annotations-for-spring-integration-testing/


Canvas
https://developer.mozilla.org/ru/docs/Web/API/CanvasRenderingContext2D

JFR - новые инструменты диагностики, которые предоставила Oracle в Java 8
http://bazhenov.me/blog/2014/07/20/java-8-top10.html


== DB
select now()::timestamp with time zone at time zone 'America/New_York';
select now()::timestamp with time zone at time zone 'UTC-4:00';

"Mapping JPA in Your Database With the Time API":
https://dzone.com/articles/storing-java-8-localdatetime-as-timestamp-postgres

"How to read Postgre 'timestamp' without time-zone to Java 8 time API":
https://stackoverflow.com/questions/41618165/how-to-specify-utc-timezone-for-spring-boot-jpa-timestamp

"Always Use TIMESTAMP WITH TIME ZONE"
http://justatheory.com/computers/databases/postgresql/use-timestamptz.html

Использование Hibernate + JSR JCache + Ehcache 3
https://www.boraji.com/hibernate-5-jcache-ehcache-3-configuration-example

